{"ast":null,"code":"import _classCallCheck from \"D:/data/ng-otp-input/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/data/ng-otp-input/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Pipe, EventEmitter, Component, Input, Output, Directive, ElementRef, Renderer2, NgModule } from '@angular/core';\nimport { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/forms';\n\nfunction NgOtpInputComponent_div_0_input_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"input\", 3);\n    ɵngcc0.ɵɵlistener(\"keydown\", function NgOtpInputComponent_div_0_input_1_Template_input_keydown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r4.onKeyDown($event);\n    })(\"keyup\", function NgOtpInputComponent_div_0_input_1_Template_input_keyup_0_listener($event) {\n      var restoredCtx = ɵngcc0.ɵɵrestoreView(_r5);\n      var i_r3 = restoredCtx.index;\n      var ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r6.onKeyUp($event, i_r3);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var item_r2 = ctx.$implicit;\n    var i_r3 = ctx.index;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"otp-input \", ctx_r1.config.inputClass, \"\");\n    ɵngcc0.ɵɵpropertyInterpolate2(\"id\", \"otp_\", i_r3, \"_\", ctx_r1.componentKey, \"\");\n    ɵngcc0.ɵɵproperty(\"pattern\", ctx_r1.config.allowNumbersOnly ? \"\\\\d*\" : \"\")(\"type\", ctx_r1.inputType)(\"placeholder\", (ctx_r1.config == null ? null : ctx_r1.config.placeholder) || \"\")(\"disabledNumberOnly\", !ctx_r1.config.allowNumbersOnly)(\"ngStyle\", ctx_r1.config.inputStyles)(\"formControl\", ctx_r1.otpForm.controls[item_r2]);\n  }\n}\n\nfunction NgOtpInputComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(1, NgOtpInputComponent_div_0_input_1_Template, 1, 11, \"input\", 2);\n    ɵngcc0.ɵɵpipe(2, \"keys\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMapInterpolate1(\"wrapper \", ctx_r0.config.containerClass, \"\");\n    ɵngcc0.ɵɵpropertyInterpolate1(\"id\", \"c_\", ctx_r0.componentKey, \"\");\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r0.config.containerStyles);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind1(2, 6, ctx_r0.otpForm == null ? null : ctx_r0.otpForm.controls));\n  }\n}\n\nvar KeysPipe = /*@__PURE__*/function () {\n  var KeysPipe = /*#__PURE__*/function () {\n    function KeysPipe() {\n      _classCallCheck(this, KeysPipe);\n    }\n\n    _createClass(KeysPipe, [{\n      key: \"transform\",\n      value:\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      function transform(value) {\n        return Object.keys(value);\n      }\n    }]);\n\n    return KeysPipe;\n  }();\n\n  KeysPipe.ɵfac = function KeysPipe_Factory(t) {\n    return new (t || KeysPipe)();\n  };\n\n  KeysPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n    name: \"keys\",\n    type: KeysPipe,\n    pure: true\n  });\n  return KeysPipe;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar Config = function Config() {\n  _classCallCheck(this, Config);\n};\n\nif (false) {\n  /** @type {?} */\n  Config.prototype.inputStyles;\n  /** @type {?} */\n\n  Config.prototype.containerStyles;\n  /** @type {?} */\n\n  Config.prototype.allowKeyCodes;\n  /** @type {?} */\n\n  Config.prototype.length;\n  /** @type {?} */\n\n  Config.prototype.allowNumbersOnly;\n  /** @type {?} */\n\n  Config.prototype.inputClass;\n  /** @type {?} */\n\n  Config.prototype.containerClass;\n  /** @type {?} */\n\n  Config.prototype.isPasswordInput;\n  /** @type {?} */\n\n  Config.prototype.disableAutoFocus;\n  /** @type {?} */\n\n  Config.prototype.placeholder;\n}\n\nvar NgOtpInputComponent = /*@__PURE__*/function () {\n  var NgOtpInputComponent = /*#__PURE__*/function () {\n    /**\n     * @param {?} keysPipe\n     */\n    function NgOtpInputComponent(keysPipe) {\n      _classCallCheck(this, NgOtpInputComponent);\n\n      this.keysPipe = keysPipe;\n      this.config = {\n        length: 4\n      }; // tslint:disable-next-line: no-output-on-prefix\n\n      this.onInputChange = new EventEmitter();\n      this.inputControls = new Array(this.config.length);\n      this.componentKey = Math.random().toString(36).substring(2) + new Date().getTime().toString(36);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(NgOtpInputComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.otpForm = new FormGroup({});\n\n        for (var index = 0; index < this.config.length; index++) {\n          this.otpForm.addControl(this.getControlName(index), new FormControl());\n        }\n\n        this.inputType = this.getInputType();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this = this;\n\n        if (!this.config.disableAutoFocus) {\n          /** @type {?} */\n          var containerItem = document.getElementById(\"c_\".concat(this.componentKey));\n\n          if (containerItem) {\n            containerItem.addEventListener('paste',\n            /**\n            * @param {?} evt\n            * @return {?}\n            */\n            function (evt) {\n              return _this.handlePaste(evt);\n            });\n            /** @type {?} */\n\n            var ele = containerItem.getElementsByClassName('otp-input')[0];\n\n            if (ele && ele.focus) {\n              ele.focus();\n            }\n          }\n        }\n      }\n      /**\n       * @private\n       * @param {?} idx\n       * @return {?}\n       */\n\n    }, {\n      key: \"getControlName\",\n      value: function getControlName(idx) {\n        return \"ctrl_\".concat(idx);\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"ifLeftArrow\",\n      value: function ifLeftArrow(event) {\n        return this.ifKeyCode(event, 37);\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"ifRightArrow\",\n      value: function ifRightArrow(event) {\n        return this.ifKeyCode(event, 39);\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"ifBackspaceOrDelete\",\n      value: function ifBackspaceOrDelete(event) {\n        return event.key === 'Backspace' || event.key === 'Delete' || this.ifKeyCode(event, 8) || this.ifKeyCode(event, 46);\n      }\n      /**\n       * @param {?} event\n       * @param {?} targetCode\n       * @return {?}\n       */\n\n    }, {\n      key: \"ifKeyCode\",\n      value: function ifKeyCode(event, targetCode) {\n        /** @type {?} */\n        var key = event.keyCode || event.charCode; // tslint:disable-next-line: triple-equals\n\n        return key == targetCode ? true : false;\n      }\n      /**\n       * @param {?} $event\n       * @return {?}\n       */\n\n    }, {\n      key: \"onKeyDown\",\n      value: function onKeyDown($event) {\n        /** @type {?} */\n        var isSpace = this.ifKeyCode($event, 32);\n\n        if (isSpace) {\n          // prevent space\n          return false;\n        }\n      }\n      /**\n       * @param {?} $event\n       * @param {?} inputIdx\n       * @return {?}\n       */\n\n    }, {\n      key: \"onKeyUp\",\n      value: function onKeyUp($event, inputIdx) {\n        /** @type {?} */\n        var nextInputId = this.appendKey(\"otp_\".concat(inputIdx + 1));\n        /** @type {?} */\n\n        var prevInputId = this.appendKey(\"otp_\".concat(inputIdx - 1));\n\n        if (this.ifRightArrow($event)) {\n          this.setSelected(nextInputId);\n          return;\n        }\n\n        if (this.ifLeftArrow($event)) {\n          this.setSelected(prevInputId);\n          return;\n        }\n        /** @type {?} */\n\n\n        var isBackspace = this.ifBackspaceOrDelete($event);\n\n        if (isBackspace && !$event.target.value) {\n          this.setSelected(prevInputId);\n          this.rebuildValue();\n          return;\n        }\n\n        if (!$event.target.value) {\n          return;\n        }\n\n        if (this.ifValidEntry($event)) {\n          this.setSelected(nextInputId);\n        }\n\n        this.rebuildValue();\n      }\n      /**\n       * @param {?} id\n       * @return {?}\n       */\n\n    }, {\n      key: \"appendKey\",\n      value: function appendKey(id) {\n        return \"\".concat(id, \"_\").concat(this.componentKey);\n      }\n      /**\n       * @param {?} eleId\n       * @return {?}\n       */\n\n    }, {\n      key: \"setSelected\",\n      value: function setSelected(eleId) {\n        this.focusTo(eleId);\n        /** @type {?} */\n\n        var ele = document.getElementById(eleId);\n\n        if (ele && ele.setSelectionRange) {\n          setTimeout(\n          /**\n          * @return {?}\n          */\n          function () {\n            ele.setSelectionRange(0, 1);\n          }, 0);\n        }\n      }\n      /**\n       * @param {?} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"ifValidEntry\",\n      value: function ifValidEntry(event) {\n        /** @type {?} */\n        var inp = String.fromCharCode(event.keyCode);\n        /** @type {?} */\n\n        var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n        return isMobile || /[a-zA-Z0-9-_]/.test(inp) || this.config.allowKeyCodes && this.config.allowKeyCodes.includes(event.keyCode) || event.keyCode >= 96 && event.keyCode <= 105;\n      }\n      /**\n       * @param {?} eleId\n       * @return {?}\n       */\n\n    }, {\n      key: \"focusTo\",\n      value: function focusTo(eleId) {\n        /** @type {?} */\n        var ele = document.getElementById(eleId);\n\n        if (ele) {\n          ele.focus();\n        }\n      } // method to set component value\n\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"setValue\",\n      value: function setValue(value) {\n        var _this2 = this;\n\n        if (this.config.allowNumbersOnly && isNaN(value)) {\n          return;\n        }\n\n        this.otpForm.reset();\n\n        if (!value) {\n          this.rebuildValue();\n          return;\n        }\n\n        value = value.toString().replace(/\\s/g, ''); // remove whitespace\n\n        Array.from(value).forEach(\n        /**\n        * @param {?} c\n        * @param {?} idx\n        * @return {?}\n        */\n        function (c, idx) {\n          if (_this2.otpForm.get(_this2.getControlName(idx))) {\n            _this2.otpForm.get(_this2.getControlName(idx)).setValue(c);\n          }\n        });\n\n        if (!this.config.disableAutoFocus) {\n          /** @type {?} */\n          var containerItem = document.getElementById(\"c_\".concat(this.componentKey));\n          /** @type {?} */\n\n          var indexOfElementToFocus = value.length < this.config.length ? value.length : this.config.length - 1;\n          /** @type {?} */\n\n          var ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\n\n          if (ele && ele.focus) {\n            ele.focus();\n          }\n        }\n\n        this.rebuildValue();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"rebuildValue\",\n      value: function rebuildValue() {\n        var _this3 = this;\n\n        /** @type {?} */\n        var val = '';\n        this.keysPipe.transform(this.otpForm.controls).forEach(\n        /**\n        * @param {?} k\n        * @return {?}\n        */\n\n        /**\n        * @param {?} k\n        * @return {?}\n        */\n        function (k) {\n          if (_this3.otpForm.controls[k].value) {\n            val += _this3.otpForm.controls[k].value;\n          }\n        });\n        this.onInputChange.emit(val);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"getInputType\",\n      value: function getInputType() {\n        return this.config.isPasswordInput ? 'password' : this.config.allowNumbersOnly ? 'tel' : 'text';\n      }\n      /**\n       * @param {?} e\n       * @return {?}\n       */\n\n    }, {\n      key: \"handlePaste\",\n      value: function handlePaste(e) {\n        // Get pasted data via clipboard API\n\n        /** @type {?} */\n        var clipboardData = e.clipboardData || window['clipboardData'];\n\n        if (clipboardData) {\n          /** @type {?} */\n          var pastedData = clipboardData.getData('Text');\n        } // Stop data actually being pasted into div\n\n\n        e.stopPropagation();\n        e.preventDefault();\n\n        if (!pastedData) {\n          return;\n        }\n\n        this.setValue(pastedData);\n      }\n    }]);\n\n    return NgOtpInputComponent;\n  }();\n\n  NgOtpInputComponent.ɵfac = function NgOtpInputComponent_Factory(t) {\n    return new (t || NgOtpInputComponent)(ɵngcc0.ɵɵdirectiveInject(KeysPipe));\n  };\n\n  NgOtpInputComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgOtpInputComponent,\n    selectors: [[\"ng-otp-input\"]],\n    inputs: {\n      config: \"config\"\n    },\n    outputs: {\n      onInputChange: \"onInputChange\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"class\", \"id\", \"ngStyle\", 4, \"ngIf\"], [3, \"id\", \"ngStyle\"], [\"numberOnly\", \"\", \"maxlength\", \"1\", \"autocomplete\", \"off\", 3, \"pattern\", \"type\", \"placeholder\", \"disabledNumberOnly\", \"ngStyle\", \"class\", \"formControl\", \"id\", \"keydown\", \"keyup\", 4, \"ngFor\", \"ngForOf\"], [\"numberOnly\", \"\", \"maxlength\", \"1\", \"autocomplete\", \"off\", 3, \"pattern\", \"type\", \"placeholder\", \"disabledNumberOnly\", \"ngStyle\", \"formControl\", \"id\", \"keydown\", \"keyup\"]],\n    template: function NgOtpInputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NgOtpInputComponent_div_0_Template, 3, 8, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.otpForm == null ? null : ctx.otpForm.controls);\n      }\n    },\n    directives: function directives() {\n      return [ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc1.NgForOf, ɵngcc2.DefaultValueAccessor, NumberOnlyDirective, ɵngcc2.MaxLengthValidator, ɵngcc2.PatternValidator, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective];\n    },\n    pipes: function pipes() {\n      return [KeysPipe];\n    },\n    styles: [\".otp-input[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:4px;border:1px solid #c5c5c5;text-align:center;font-size:32px}.wrapper[_ngcontent-%COMP%]   .otp-input[_ngcontent-%COMP%]:not(:last-child){margin-right:8px}@media screen and (max-width:767px){.otp-input[_ngcontent-%COMP%]{width:40px;font-size:24px;height:40px}}@media screen and (max-width:420px){.otp-input[_ngcontent-%COMP%]{width:30px;font-size:18px;height:30px}}\"]\n  });\n  return NgOtpInputComponent;\n}();\n\nif (false) {\n  /** @type {?} */\n  NgOtpInputComponent.prototype.config;\n  /** @type {?} */\n\n  NgOtpInputComponent.prototype.onInputChange;\n  /** @type {?} */\n\n  NgOtpInputComponent.prototype.otpForm;\n  /** @type {?} */\n\n  NgOtpInputComponent.prototype.inputControls;\n  /** @type {?} */\n\n  NgOtpInputComponent.prototype.componentKey;\n  /** @type {?} */\n\n  NgOtpInputComponent.prototype.inputType;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgOtpInputComponent.prototype.keysPipe;\n}\n\nvar NumberOnlyDirective = /*@__PURE__*/function () {\n  var NumberOnlyDirective = /*#__PURE__*/function () {\n    /**\n     * @param {?} _elRef\n     * @param {?} _renderer\n     */\n    function NumberOnlyDirective(_elRef, _renderer) {\n      _classCallCheck(this, NumberOnlyDirective);\n\n      this._elRef = _elRef;\n      this._renderer = _renderer;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(NumberOnlyDirective, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (!this.disabledNumberOnly) {\n          this._renderer.setAttribute(this._elRef.nativeElement, 'onkeypress', 'return (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 0');\n        }\n      }\n    }]);\n\n    return NumberOnlyDirective;\n  }();\n\n  NumberOnlyDirective.ɵfac = function NumberOnlyDirective_Factory(t) {\n    return new (t || NumberOnlyDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  NumberOnlyDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NumberOnlyDirective,\n    selectors: [[\"\", \"numberOnly\", \"\"]],\n    inputs: {\n      disabledNumberOnly: \"disabledNumberOnly\"\n    }\n  });\n  return NumberOnlyDirective;\n}();\n\nif (false) {\n  /** @type {?} */\n  NumberOnlyDirective.prototype.disabledNumberOnly;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NumberOnlyDirective.prototype._elRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NumberOnlyDirective.prototype._renderer;\n}\n\nvar NgOtpInputModule = /*@__PURE__*/function () {\n  var NgOtpInputModule = function NgOtpInputModule() {\n    _classCallCheck(this, NgOtpInputModule);\n  };\n\n  NgOtpInputModule.ɵfac = function NgOtpInputModule_Factory(t) {\n    return new (t || NgOtpInputModule)();\n  };\n\n  NgOtpInputModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgOtpInputModule\n  });\n  NgOtpInputModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [KeysPipe],\n    imports: [[CommonModule, FormsModule, ReactiveFormsModule]]\n  });\n  return NgOtpInputModule;\n}();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgOtpInputModule, {\n    declarations: function declarations() {\n      return [NgOtpInputComponent, KeysPipe, NumberOnlyDirective];\n    },\n    imports: function imports() {\n      return [CommonModule, FormsModule, ReactiveFormsModule];\n    },\n    exports: function exports() {\n      return [NgOtpInputComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NgOtpInputModule, NgOtpInputComponent as ɵa, KeysPipe as ɵb, NumberOnlyDirective as ɵc }; //# sourceMappingURL=ng-otp-input.js.map","map":null,"metadata":{},"sourceType":"module"}